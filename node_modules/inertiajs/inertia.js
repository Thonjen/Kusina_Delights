/******************************************************************
 * Software : inertia.js web framework
 * Created by Jim-Ber 
 * YEar...this is just an experiment...just for fun!
 *
 ******************************************************************/

//lets require the file module
var fs = require("fs");
//require the htp module
var http = require("http");
//require the url module
var urlparse = require("url");
//require content types for header result
var contentTypes = require("./contenttype");

var util = require("util");

var database = require("./database");
// serverSet allows global configuration
// for the server
var serverSet = {
	// restrict directory to index.html only
	// else, the directory will list all
	// the items
	"allowIndexOnly":false,

	// set the default web folder
	// if rewriteModule is set to
	// off...any files inside this
	"root" : "./public",

	// set rewrite functions on or off
	// can be set to off, on and strict
	// @off		  - server will serve any files in
	//       	    the root
	// @on  	  - server will implement rewrite rules and slightly restrict 
	//		 	    server access
	// @strict 	  - server will only accept rewrite rules
	//				using url parameters such as /var/$www
	"rewriteModule" : "off",

	// set the default port
	"port" : 80,

	//error reporting
	// can be set to development and production
	// @development - error will display
	// @production - no error display
	"error" : "development",

	//maximum script execution time in millisecond
	"maxExec" : 30000
}

//exporting our module
exports.init = function(options){
	//initialize user deined settings
	for(key in options){
		serverSet[key] = options[key];
	}


	var _inertia = {
		
		fn : function(){},
		
		exceptionHandler : function(res){
			
			switch(serverSet.error){
				case "development":
					process.on("uncaughtException",function(err){
							res.end(err.stack.toString().replace(/eval/gi,'classExecution'));
					});
					break;
				case "production":
					process.on("uncaughtException",function(err){
							res.end();
					});
					break;
			}

		},
		startServer : function(callback){

		    var server = http.createServer(function(request, response) { 
		    	
		    	pathname = serverSet.root+urlparse.parse(request.url).pathname.replace(/\/$/,"");
		    	
		    	pathname = decodeURI(pathname);
		    	//read all the content of the same directory
				fs.readFile(pathname, function (err, html) {
					    
					    
				    		fs.stat(pathname,function(err, stats){
					    		//tell if it is a file
					    		if (!err && stats.isFile())
					    		{
									try{
										console.log("GET " + request.url + " found in "+pathname);
										response.writeHeader(200, {"Content-Type": contentTypes[_inertia.getExtension(request.url)]});  // <-- HERE!
										response.write(html); 
										response.end();  
									}catch(e){
										console.log("Server encountered error while serving "+pathname);
									}
								}
								else if(!err && stats.isDirectory())
								{
					    			console.log("GET " + pathname + " is a directory");
									//test if contains index
									if(serverSet.rewriteModule != "strict"){
										fs.stat(pathname + "/index.html",function(err,stats){
											if(!err && stats.isFile()) {
												fs.readFile(pathname + "/index.html", function (err, html) {
													response.writeHeader(200, {"Content-Type": "text/html"});  // <-- HERE!
													response.write(html); 
													response.end(); 
												});
											}else{
												response.writeHeader(200, {"Content-Type": "text/html"});  // <-- HERE!
												response.write("<h1>No index found</h1>"); 
												response.end(); 
											}
										});
									}else{
										_inertia.route.watch(request,response);
									}
								}else{
									if(serverSet.rewriteModule == "off"){
										response.writeHeader(200, {"Content-Type": "text/html"});  // <-- HERE!
										response.write("<h1>No file found</h1>"); 
										response.end(); 
									}else{
										if(typeof contentTypes[_inertia.getExtension(request.url)] !== "undefined"){
											try{
												var data = _inertia.checkIfFile(request.url);
												response.writeHeader(200, {"Content-Type": contentTypes[_inertia.getExtension(request.url)]});  // <-- HERE!
												response.write(data); 
												response.end();  
											}catch(e){
												console.log("Error loading data " + request.url);
											}
										}else{
											_inertia.route.watch(request,response);
										}
									}
								}
							});
						callback(request, response);
					
		        });
		        
		        
				_inertia.exceptionHandler(response);
		        
		    });

		    server.listen(serverSet.port);
			_inertia.mess.echo("Server started running at port " + serverSet.port);

		},
		//this is good
		routeRules : new Object(),
		//this is good
		routeCall : new Object(),
		
		view : new Object(), //this is good
		
		route : { //this is good also
			
			addRule : function(rule,callback){
				if(typeof callback !== "function"){


				}else{
					//register new rule
					//_inertia.routeRules[Object.keys(rule)[0]] = rule[Object.keys(rule)[0]];
					//register callback for the rule
					//_inertia.routeCall[Object.keys(rule)[0]] = callback;
					for(key in rule)
					{
						_inertia.routeRules[key] = rule[key];
						_inertia.routeCall[key] = callback;
					}

				}
			},
			
			watch : function(req,res){
				
				var somethingexecuted = false,
					dataobject = new Object({"get":{},"post":{}}),
					urlparam = req.url,
					expression = req.url,
					postdata;
				

				req.on("data",function(dataentry){
					
					dataobject["post"] = _inertia.parseRequestData(dataentry.toString());
						
				});
				
				if(urlparam.match(/\?[\w\W]+/)){
					var data = urlparam.split(/\?/);
					dataobject["get"] = _inertia.parseRequestData(data[1].toString());
				}
				
					for(var rule in _inertia.routeRules){
						//console.log(rule);
						//compute
						var route_param = _inertia.routeRules[rule].replace(/\/$/,"").split("/");
						//console.log("url is "+url);
						try{
							var url = urlparam.replace(/\?[\w\W]+/gi,"").replace(/\/$/,"").split("#");
							var url_analyze = url[1].split("/");
						}catch(e){
							var url_analyze = urlparam.replace(/\?[\w\W]+/gi,"").replace(/\/$/,"").split("/");
						}
						//set break trigger to false
						var breakLoop = false;
						//set checkfile to fasle
						var checkfile = false;
						//check if same length
						if(route_param.length == url_analyze.length){
							//same length thats good!
							var return_param = new Object();
							
							for(var i = 1;i < route_param.length;i++){
								if(route_param[i].toString().match(/\$[a-zA-Z0-9]+/)){
									//console.log(route_param[i]+" matches $param");
									return_param[route_param[i].replace(/\$/,"")] = url_analyze[i];
								}else{
									//console.log(route_param[i]+" do not matches $param, it is not a parameter so check if equal");
									if(route_param[i] == url_analyze[i]){
										//console.log("they are equal so carry on");
									}else{
										//console.log("they are not same, break loop");
										//tell the next job to stop event
										//cause theres nothing to execute
										breakLoop = true;
										break;
									}
								}
							}
							
						}else{
							//console.log("not of the same length");
							breakLoop = true;
						}
					
						if(!breakLoop){
							
							//this will ensure that route works
							somethingexecuted = true;
							//this will ensure that function callback will not executed no matter what
							_inertia.routeCall[rule]({"param" : return_param,"data": dataobject});


						}	
							
					}

			
					if(!somethingexecuted){
						
						var exec = {"index":false,"error":false};

						if(typeof _inertia.routeCall["error"] !== "undefined"){
							exec.index = true;
							_inertia.routeCall["error"](return_param,dataobject);
						}else{
							console.log("warning:no error rule defined");
						}

						if(typeof _inertia.routeCall["index"] !== "undefined"){
							exec.error = true;
							_inertia.routeCall["index"](return_param,dataobject);
						}else{
							console.log("warning:no index rule defined");
						}

						if(exec.index == false && exec.error == false){
							res.write("<h1>Rewrite rule error</h1>");
							res.end();
						}
					}
				

			}
			
		},

		checkIfFile : function(filepath){
			//clean the path
			mypath = filepath.replace(/^[\.\/]+/,'/');
			//test whether it has / in parsing
			//or else our loop will run forever
			if(mypath.match(/\//)){
				while(mypath.length > 0){
					try
					{
						var stat = fs.statSync(serverSet.root + mypath);
						if(stat.isFile()){
							_inertia.mess.echo("GET " + serverSet.root + mypath +" founded");
							return fs.readFileSync(serverSet.root + mypath);
							break;
							
						}
					}
					catch(e)
					{
						//error occured
					}
					mypath = mypath.replace(/^\/[\w\.\_\s\%\,]+/,"");
				};
			}
			return;
		},

		parseRequestData : function(dataURL)
		{
			try{
				//sometimes we want to pass json
				var returnParse = JSON.parse(dataURL);
				
			}catch(e){
				var returnParse = new Object();
				var toParse = dataURL.split("&");
				for(var i = 0;i < toParse.length;i++)
				{
					var processedData = toParse[i].split("=");
					returnParse[processedData[0]] = processedData[1];
				}
			}
			
			return returnParse;
		},
		
		on : function(res)
		{
			
			return {
				include : function(datapath,data)
				{

					try
					{
						fs.readFile(datapath,function(err, filecontent)
						{
							res.writeHead(200,{"Content Type":"text/html"});
							if(typeof data !== "undefined"){
								
								var parsedFile = filecontent.toString();
								
								for(key in data){
									var reg = new RegExp("\{\{" + key + "\}\}");
									parsedFile = parsedFile.replace(eval(reg),typeof data[key] !== "undefined" ? data[key] : "");
								}
								
								res.write(parsedFile.replace(/\{\{[\w\.\-\_]+\}\}/gi,""));
							}else{
							res.write(filecontent.toString());
							}
							res.end();
						});
					}catch(e)
					{
						return e;
					}
				}
			}
		},
		
		mess : {
			error : function(err)
			{
				error.log(err);
			},
			echo : function(msg)
			{
				console.log(msg);
			}
		},
		
		class : new Object(),
		
		get : function(path,callback){
			
			try{
				
			return fs.readFileSync(path).toString();
			
			}catch(e){
			return;
			}
			
		},
		
		getExtension : function(filename)
		{
			var i = filename.lastIndexOf('.');
			return (i < 0) ? '' : filename.substr(i);
		},
		module : function(path){
			try{
				var data = fs.readFileSync(path);
				
				/* Eval is not evil here,
				 * cause we are on server and
				 * we need to execute other functions 
				 * from outside
				 */
				eval(data.toString());
			}catch(e){
				_inertia.mess.echo("Error loading "+path+" " + e);
				return;
			}
		},
		/*
		 *  Experimental for MySQL module
		 * 
		 */
		query : {
			"query" : undefined,
			
			"prepare" : function(query){
				this.query = query;
				
				return this;
			},
			"sanitize" : function(expression, substitution, datatype){
				var reg = new RegExp(expression);
				
				this.query = this.query.toString().replace(reg,this.datatyper(substitution,datatype));
			},
			"execute" : function(callback){
				//console.log(this.query);
				var q = database.query(this.query,function(err, rows, fields){
					callback(err, rows, fields);
				});
				
			},
			"datatyper" : function(subs,type){
				if(type == "string"){
					return "'" + subs + "'";
				}else if(type == "integer"){
					return subs.toString().replace(/[a-zA-Z\W]/gi,"");
				}else{
					return "'" + subs + "'";
				}
			}
			
		}
		
			
		
	};
	
	var app = _inertia;
	
	return _inertia;
	
		
}




